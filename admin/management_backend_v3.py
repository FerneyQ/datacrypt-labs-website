#!/usr/bin/env python3
"""
üöÄ DATACRYPT LABS - MANAGEMENT BACKEND v3.0 - MEJORA CONTINUA
Sistema de Gesti√≥n Empresarial Avanzado siguiendo Filosof√≠a PDCA

CARACTER√çSTICAS PRINCIPALES:
‚úÖ API REST robusta con FastAPI
‚úÖ Sistema de voz completamente integrado
‚úÖ Monitoreo en tiempo real del sistema
‚úÖ Seguridad avanzada con validaciones
‚úÖ Logging inteligente con rotaci√≥n autom√°tica
‚úÖ Sistema de estado global sincronizado
‚úÖ Manejo robusto de errores con recovery autom√°tico
‚úÖ Arquitectura modular basada en mejores pr√°cticas
‚úÖ Filosof√≠a PDCA aplicada en toda la estructura

AUTOR: DataCrypt Labs
VERSI√ìN: 3.0.0
FECHA: 21 Octubre 2025
"""

import asyncio
import json
import logging
import os
import platform
import psutil
import requests
import time
import traceback
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from enum import Enum
import sys

# FastAPI y dependencias
from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends, status, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel, Field, validator
import uvicorn

# ==================== CONFIGURACI√ìN DE LOGGING AVANZADO ====================

class ColoredFormatter(logging.Formatter):
    """Formatter con colores para mejor visualizaci√≥n"""
    
    COLORS = {
        'DEBUG': '\033[36m',    # Cian
        'INFO': '\033[32m',     # Verde
        'WARNING': '\033[33m',  # Amarillo
        'ERROR': '\033[31m',    # Rojo
        'CRITICAL': '\033[35m', # Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset_color = self.COLORS['RESET']
        
        record.levelname = f"{log_color}{record.levelname}{reset_color}"
        record.name = f"{log_color}{record.name}{reset_color}"
        
        return super().format(record)

# Configurar logging con rotaci√≥n y colores
def setup_logging():
    """Configurar sistema de logging avanzado"""
    
    # Crear directorio de logs
    Path("logs").mkdir(exist_ok=True)
    
    # Formatter para archivos
    file_formatter = logging.Formatter(
        '%(asctime)s | %(name)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s'
    )
    
    # Formatter para consola
    console_formatter = ColoredFormatter(
        '%(asctime)s | %(name)s | %(levelname)s | %(message)s'
    )
    
    # Handler para archivo
    file_handler = logging.FileHandler('logs/datacrypt_backend.log', encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(file_formatter)
    
    # Handler para consola
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(console_formatter)
    
    # Configurar logger principal
    logger = logging.getLogger("DataCryptBackend")
    logger.setLevel(logging.INFO)
    logger.handlers.clear()
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

logger = setup_logging()

# ==================== ENUMS Y CONSTANTES ====================

class SystemStatus(str, Enum):
    """Estados del sistema con mejora continua"""
    OPTIMAL = "optimal"           # Funcionamiento perfecto
    WARNING = "warning"           # Requiere atenci√≥n
    CRITICAL = "critical"         # Problema grave
    MAINTENANCE = "maintenance"   # En mantenimiento
    UPGRADING = "upgrading"       # Actualiz√°ndose

class VoiceReportType(str, Enum):
    """Tipos de reportes de voz especializados"""
    COMPLETE = "complete"         # Reporte completo del sistema
    SECURITY = "security"         # Estado de seguridad
    PERFORMANCE = "performance"   # M√©tricas de rendimiento
    STATUS = "status"            # Estado actual r√°pido
    ALERTS = "alerts"            # Alertas importantes
    METRICS = "metrics"          # M√©tricas espec√≠ficas
    CUSTOM = "custom"            # Reporte personalizado

class SecurityLevel(str, Enum):
    """Niveles de seguridad del sistema"""
    LOW = "low"
    MEDIUM = "medium"  
    HIGH = "high"
    MAXIMUM = "maximum"
    PARANOID = "paranoid"

# ==================== CONFIGURACI√ìN CENTRALIZADA ====================

@dataclass
class SystemConfig:
    """Configuraci√≥n centralizada con validaciones"""
    # Configuraci√≥n general
    debug_mode: bool = False
    environment: str = "production"
    
    # Configuraci√≥n de logs
    max_log_size_mb: int = 50
    log_retention_days: int = 30
    log_level: str = "INFO"
    
    # Configuraci√≥n de seguridad
    security_level: SecurityLevel = SecurityLevel.HIGH
    session_timeout_minutes: int = 30
    max_failed_attempts: int = 5
    
    # Configuraci√≥n de voz
    voice_enabled: bool = True
    voice_language: str = "es-ES"
    voice_rate: float = 1.0
    voice_volume: float = 0.8
    
    # Configuraci√≥n de monitoreo
    monitoring_interval_seconds: int = 60
    metrics_retention_hours: int = 48
    alert_threshold_cpu: float = 80.0
    alert_threshold_memory: float = 85.0
    alert_threshold_disk: float = 90.0
    
    # Configuraci√≥n de API externa
    github_api_timeout: int = 30
    github_api_retries: int = 3
    auto_deploy: bool = True
    
    # Configuraci√≥n de performance
    max_concurrent_requests: int = 100
    request_timeout_seconds: int = 30
    cache_ttl_seconds: int = 300

class ConfigManager:
    """Gestor centralizado de configuraci√≥n con persistencia"""
    
    def __init__(self):
        self.config = SystemConfig()
        self.config_file = Path("config/system_config.json")
        self.load_config()
        logger.info("‚úÖ ConfigManager inicializado")
    
    def load_config(self):
        """Cargar configuraci√≥n desde archivo con validaci√≥n"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                # Validar y aplicar configuraci√≥n
                for key, value in data.items():
                    if hasattr(self.config, key):
                        # Validar tipos de enum
                        if key == 'security_level':
                            value = SecurityLevel(value)
                        setattr(self.config, key, value)
                        
                logger.info(f"‚úÖ Configuraci√≥n cargada desde {self.config_file}")
            else:
                logger.info("üìù Usando configuraci√≥n por defecto")
                self.save_config()
                
        except Exception as e:
            logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
            logger.info("üîß Usando configuraci√≥n por defecto")
    
    def save_config(self):
        """Guardar configuraci√≥n actual con backup"""
        try:
            # Crear directorio si no existe
            self.config_file.parent.mkdir(parents=True, exist_ok=True)
            
            # Backup de configuraci√≥n anterior
            if self.config_file.exists():
                backup_file = self.config_file.with_suffix(f'.backup.{int(time.time())}')
                self.config_file.rename(backup_file)
                logger.info(f"üíæ Backup creado: {backup_file}")
            
            # Guardar nueva configuraci√≥n
            config_dict = asdict(self.config)
            # Convertir enums a strings para JSON
            for key, value in config_dict.items():
                if isinstance(value, Enum):
                    config_dict[key] = value.value
                    
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_dict, f, indent=2, ensure_ascii=False)
                
            logger.info(f"‚úÖ Configuraci√≥n guardada en {self.config_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando configuraci√≥n: {e}")
    
    def update_config(self, **kwargs):
        """Actualizar configuraci√≥n espec√≠fica"""
        updated = []
        for key, value in kwargs.items():
            if hasattr(self.config, key):
                old_value = getattr(self.config, key)
                setattr(self.config, key, value)
                updated.append(f"{key}: {old_value} ‚Üí {value}")
                
        if updated:
            self.save_config()
            logger.info(f"üîÑ Configuraci√≥n actualizada: {', '.join(updated)}")
        
        return len(updated)

# ==================== MODELOS DE DATOS ====================

class SystemMetrics(BaseModel):
    """M√©tricas del sistema con validaciones"""
    timestamp: datetime = Field(default_factory=datetime.now)
    cpu_usage: float = Field(..., ge=0, le=100, description="Uso de CPU en porcentaje")
    memory_usage: float = Field(..., ge=0, le=100, description="Uso de memoria en porcentaje")
    disk_usage: float = Field(..., ge=0, le=100, description="Uso de disco en porcentaje")
    network_status: bool = Field(..., description="Estado de la conexi√≥n de red")
    uptime_seconds: int = Field(..., ge=0, description="Tiempo de funcionamiento en segundos")
    active_processes: int = Field(..., ge=0, description="N√∫mero de procesos activos")
    system_load: float = Field(..., ge=0, description="Carga del sistema")
    temperature: Optional[float] = Field(None, description="Temperatura del sistema")
    
    @validator('cpu_usage', 'memory_usage', 'disk_usage')
    def validate_percentage(cls, v):
        if not 0 <= v <= 100:
            raise ValueError('El porcentaje debe estar entre 0 y 100')
        return round(v, 2)

class SecurityScanResult(BaseModel):
    """Resultado del escaneo de seguridad"""
    timestamp: datetime = Field(default_factory=datetime.now)
    scan_type: str = Field(..., description="Tipo de escaneo realizado")
    duration_seconds: float = Field(..., ge=0, description="Duraci√≥n del escaneo")
    threats_found: int = Field(0, ge=0, description="Amenazas encontradas")
    vulnerabilities: List[str] = Field(default=[], description="Lista de vulnerabilidades")
    security_score: float = Field(..., ge=0, le=100, description="Puntuaci√≥n de seguridad")
    recommendations: List[str] = Field(default=[], description="Recomendaciones de seguridad")
    files_scanned: int = Field(0, ge=0, description="Archivos escaneados")
    false_positives: int = Field(0, ge=0, description="Falsos positivos detectados")

class VoiceReportRequest(BaseModel):
    """Solicitud de reporte de voz con configuraci√≥n avanzada"""
    report_type: VoiceReportType = Field(..., description="Tipo de reporte solicitado")
    content: Optional[str] = Field(None, description="Contenido personalizado")
    voice_settings: Dict[str, Any] = Field(default={}, description="Configuraci√≥n de voz")
    priority: int = Field(1, ge=1, le=5, description="Prioridad del reporte (1=baja, 5=cr√≠tica)")
    include_timestamp: bool = Field(True, description="Incluir timestamp en el reporte")
    include_metrics: bool = Field(True, description="Incluir m√©tricas en el reporte")

class ApiResponse(BaseModel):
    """Respuesta est√°ndar de la API con metadatos"""
    success: bool = Field(..., description="Indica si la operaci√≥n fue exitosa")
    message: str = Field(..., description="Mensaje descriptivo")
    data: Optional[Dict[str, Any]] = Field(None, description="Datos de respuesta")
    timestamp: datetime = Field(default_factory=datetime.now)
    execution_time_ms: Optional[float] = Field(None, description="Tiempo de ejecuci√≥n en milisegundos")
    request_id: Optional[str] = Field(None, description="ID √∫nico de la petici√≥n")
    version: str = Field("3.0.0", description="Versi√≥n de la API")

class SystemAlert(BaseModel):
    """Alerta del sistema"""
    id: str = Field(..., description="ID √∫nico de la alerta")
    timestamp: datetime = Field(default_factory=datetime.now)
    level: str = Field(..., description="Nivel de alerta (info, warning, critical)")
    source: str = Field(..., description="Origen de la alerta")
    message: str = Field(..., description="Mensaje de la alerta")
    resolved: bool = Field(False, description="Estado de resoluci√≥n")
    resolution_time: Optional[datetime] = Field(None, description="Tiempo de resoluci√≥n")
    data: Dict[str, Any] = Field(default={}, description="Datos adicionales")

# ==================== SISTEMA DE ESTADO GLOBAL ====================

class GlobalState:
    """Sistema de estado global con sincronizaci√≥n avanzada"""
    
    def __init__(self):
        self.system_status = SystemStatus.OPTIMAL
        self.last_update = datetime.now()
        self.start_time = datetime.now()
        
        # M√©tricas e historial
        self.metrics_history: List[SystemMetrics] = []
        self.max_metrics_history = 1000
        
        # Alertas y logs
        self.alerts: List[SystemAlert] = []
        self.security_events: List[str] = []
        
        # Contadores y estad√≠sticas
        self.voice_reports_count = 0
        self.api_requests_count = 0
        self.active_connections = 0
        self.deployment_count = 0
        
        # Estados espec√≠ficos
        self.deployment_status = "ready"
        self.security_level = SecurityLevel.HIGH
        self.maintenance_mode = False
        
        # Cache para performance
        self._cache: Dict[str, Any] = {}
        self._cache_timestamps: Dict[str, datetime] = {}
        
        logger.info("üåç GlobalState inicializado")
    
    def update_status(self, new_status: SystemStatus, reason: str = ""):
        """Actualizar estado del sistema con logging"""
        old_status = self.system_status
        self.system_status = new_status
        self.last_update = datetime.now()
        
        if old_status != new_status:
            logger.info(f"üîÑ Estado del sistema: {old_status.value} ‚Üí {new_status.value}")
            if reason:
                logger.info(f"üí° Raz√≥n: {reason}")
                
            # Generar alerta si es cr√≠tico
            if new_status == SystemStatus.CRITICAL:
                self.add_alert("critical", "system", f"Sistema en estado cr√≠tico: {reason}")
    
    def add_alert(self, level: str, source: str, message: str, data: Dict = None):
        """Agregar alerta al sistema"""
        alert = SystemAlert(
            id=f"{source}_{int(time.time())}_{len(self.alerts)}",
            level=level,
            source=source,
            message=message,
            data=data or {}
        )
        
        self.alerts.append(alert)
        
        # Mantener solo las √∫ltimas 500 alertas
        if len(self.alerts) > 500:
            self.alerts = self.alerts[-500:]
            
        logger.info(f"üö® Nueva alerta [{level.upper()}] {source}: {message}")
        
        return alert
    
    def add_metrics(self, metrics: SystemMetrics):
        """Agregar m√©tricas al historial"""
        self.metrics_history.append(metrics)
        
        # Mantener solo las m√©tricas recientes
        if len(self.metrics_history) > self.max_metrics_history:
            self.metrics_history = self.metrics_history[-self.max_metrics_history:]
            
        # Verificar umbrales de alerta
        self._check_metric_thresholds(metrics)
    
    def _check_metric_thresholds(self, metrics: SystemMetrics):
        """Verificar umbrales de alerta en m√©tricas"""
        if metrics.cpu_usage > config_manager.config.alert_threshold_cpu:
            self.add_alert("warning", "metrics", f"Alto uso de CPU: {metrics.cpu_usage}%")
            
        if metrics.memory_usage > config_manager.config.alert_threshold_memory:
            self.add_alert("warning", "metrics", f"Alto uso de memoria: {metrics.memory_usage}%")
            
        if metrics.disk_usage > config_manager.config.alert_threshold_disk:
            self.add_alert("critical", "metrics", f"Alto uso de disco: {metrics.disk_usage}%")
    
    def get_status_summary(self) -> Dict[str, Any]:
        """Obtener resumen completo del estado"""
        uptime = datetime.now() - self.start_time
        
        # M√©tricas recientes
        recent_metrics = self.metrics_history[-10:] if self.metrics_history else []
        avg_cpu = sum(m.cpu_usage for m in recent_metrics) / len(recent_metrics) if recent_metrics else 0
        avg_memory = sum(m.memory_usage for m in recent_metrics) / len(recent_metrics) if recent_metrics else 0
        
        # Alertas no resueltas
        unresolved_alerts = [a for a in self.alerts if not a.resolved]
        critical_alerts = [a for a in unresolved_alerts if a.level == "critical"]
        
        return {
            "status": self.system_status.value,
            "last_update": self.last_update.isoformat(),
            "uptime": str(uptime).split('.')[0],  # Sin microsegundos
            "uptime_seconds": int(uptime.total_seconds()),
            
            # M√©tricas
            "metrics": {
                "collected": len(self.metrics_history),
                "avg_cpu_10": round(avg_cpu, 2),
                "avg_memory_10": round(avg_memory, 2),
                "last_update": recent_metrics[-1].timestamp.isoformat() if recent_metrics else None
            },
            
            # Alertas
            "alerts": {
                "total": len(self.alerts),
                "unresolved": len(unresolved_alerts),
                "critical": len(critical_alerts)
            },
            
            # Contadores
            "counters": {
                "voice_reports": self.voice_reports_count,
                "api_requests": self.api_requests_count,
                "active_connections": self.active_connections,
                "deployments": self.deployment_count
            },
            
            # Estados
            "states": {
                "deployment": self.deployment_status,
                "security_level": self.security_level.value,
                "maintenance_mode": self.maintenance_mode
            }
        }
    
    def cache_set(self, key: str, value: Any, ttl_seconds: int = 300):
        """Establecer valor en cache con TTL"""
        self._cache[key] = value
        self._cache_timestamps[key] = datetime.now() + timedelta(seconds=ttl_seconds)
    
    def cache_get(self, key: str) -> Optional[Any]:
        """Obtener valor del cache si es v√°lido"""
        if key in self._cache:
            if datetime.now() < self._cache_timestamps[key]:
                return self._cache[key]
            else:
                # Cache expirado
                del self._cache[key]
                del self._cache_timestamps[key]
        return None

# ==================== INICIALIZACI√ìN ====================

# Instancias globales
config_manager = ConfigManager()
global_state = GlobalState()
security = HTTPBearer(auto_error=False)

# Configuraci√≥n de FastAPI con metadatos avanzados
app = FastAPI(
    title="DataCrypt Labs Management API v3.0",
    description="""
    üöÄ Sistema de Gesti√≥n Empresarial Avanzado con Mejora Continua
    
    ## Caracter√≠sticas Principales
    
    * **Sistema de Voz Integrado**: Reportes autom√°ticos por voz con configuraci√≥n avanzada
    * **Monitoreo en Tiempo Real**: M√©tricas del sistema y alertas inteligentes  
    * **Seguridad Avanzada**: Escaneos autom√°ticos y validaciones robustas
    * **Estado Global**: Sincronizaci√≥n de estado en tiempo real
    * **API REST Completa**: Endpoints optimizados con validaciones
    * **Logging Inteligente**: Sistema de logs con rotaci√≥n autom√°tica
    * **Configuraci√≥n Centralizada**: Gesti√≥n avanzada de configuraci√≥n
    * **Filosof√≠a PDCA**: Metodolog√≠a de mejora continua aplicada
    
    ## Tecnolog√≠as
    
    * FastAPI üöÄ
    * Python 3.11+ üêç  
    * Pydantic para validaciones üìù
    * psutil para m√©tricas del sistema üìä
    * Logging avanzado con rotaci√≥n üìã
    
    ---
    
    **DataCrypt Labs** - Transformando datos en decisiones inteligentes
    """,
    version="3.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    contact={
        "name": "DataCrypt Labs",
        "url": "https://datacrypt-labs.com",
        "email": "contact@datacrypt-labs.com"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# Configuraci√≥n de CORS avanzada
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios exactos
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["X-Request-ID", "X-Execution-Time"]
)

# Crear directorios necesarios
required_dirs = ["logs", "config", "backups", "cache", "data"]
for dir_name in required_dirs:
    Path(dir_name).mkdir(exist_ok=True)

logger.info("üöÄ DataCrypt Labs Management Backend v3.0 inicializado")
logger.info(f"üîß Configuraci√≥n: {config_manager.config.environment}")
logger.info(f"üõ°Ô∏è Seguridad: {config_manager.config.security_level.value}")
logger.info(f"üé§ Voz: {'Habilitada' if config_manager.config.voice_enabled else 'Deshabilitada'}")