/**
 * üöÄ DATACRYPT_LABS - MAIN ENTRY POINT v3.0
 * Punto de entrada simplificado usando Sistema Unificado
 * Filosof√≠a Mejora Continua: Eliminaci√≥n de duplicaciones
 * 
 * IMPORTA Y USA:
 * - DataCryptUnifiedManager (2,700+ l√≠neas de duplicaci√≥n eliminadas)
 * - ConfigurationService (configuraci√≥n centralizada)
 * 
 * REEMPLAZA:
 * - DataCryptLabsManager original (833 l√≠neas)
 * - DATACRYPT_CONFIG fragmentado
 * - L√≥gica de inicializaci√≥n duplicada
 */

/**
 * üéØ MANAGER SIMPLIFICADO - DELEGACI√ìN AL SISTEMA UNIFICADO
 * Esta clase se mantiene por compatibilidad pero delega toda la l√≥gica
 * al DataCryptUnifiedManager para eliminar duplicaciones
 */
class DataCryptLabsManager {
    constructor() {
        // Singleton para evitar m√∫ltiples instancias
        if (DataCryptLabsManager.instance) {
            return DataCryptLabsManager.instance;
        }
        DataCryptLabsManager.instance = this;

        // Delegaci√≥n al sistema unificado (solo si est√° disponible)
        this.unifiedManager = null;
        this.configService = null;

        // Estado de compatibilidad
        this.isInitialized = false;
        this.components = new Map();
        this.initStartTime = performance.now();

        // Auto-bind para compatibilidad
        this.initialize = this.initialize.bind(this);

        console.log('üéØ DataCryptLabsManager v3.0 - Modo Compatibilidad Activado');
    }

    /**
     * üöÄ INICIALIZACI√ìN PRINCIPAL - DELEGADA AL SISTEMA UNIFICADO
     */
    async initialize() {
        try {
            console.log('üöÄ Iniciando DataCrypt Labs...');

            // Intentar cargar sistema unificado
            await this.loadUnifiedSystem();

            // Si el sistema unificado est√° disponible, delegamos
            if (this.unifiedManager) {
                console.log('‚úÖ Delegando a DataCryptUnifiedManager');
                const result = await this.unifiedManager.init();
                this.isInitialized = result;
                return result;
            }

            // Fallback: inicializaci√≥n b√°sica
            console.log('‚ö†Ô∏è Sistema unificado no disponible, usando fallback b√°sico');
            return await this.fallbackInitialization();

        } catch (error) {
            console.error('‚ùå Error en inicializaci√≥n:', error);
            return await this.fallbackInitialization();
        }
    }

    /**
     * üì¶ CARGAR SISTEMA UNIFICADO
     */
    async loadUnifiedSystem() {
        try {
            // Intentar cargar DataCryptUnifiedManager
            if (window.DataCryptUnifiedManager) {
                this.unifiedManager = new window.DataCryptUnifiedManager();
                console.log('‚úÖ DataCryptUnifiedManager cargado desde global');
            } else {
                // Intentar importaci√≥n din√°mica
                const { default: UnifiedManager } = await import('/src/core/DataCryptUnifiedManager.js');
                this.unifiedManager = new UnifiedManager();
                console.log('‚úÖ DataCryptUnifiedManager importado din√°micamente');
            }

            // Intentar cargar ConfigurationService
            if (window.ConfigurationService) {
                this.configService = window.ConfigurationService.getInstance();
                console.log('‚úÖ ConfigurationService cargado desde global');
            } else {
                const { default: ConfigService } = await import('/src/core/ConfigurationService.js');
                this.configService = ConfigService.getInstance();
                console.log('‚úÖ ConfigurationService importado din√°micamente');
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è No se pudo cargar sistema unificado:', error.message);
        }
    }

    /**
     * üîÑ INICIALIZACI√ìN B√ÅSICA DE FALLBACK
     */
    async fallbackInitialization() {
        try {
            console.log('üîÑ Ejecutando inicializaci√≥n b√°sica...');

            // 1. Mostrar loading b√°sico
            this.showBasicLoading();

            // 2. Configuraci√≥n m√≠nima
            await this.loadBasicConfig();

            // 3. Inicializar componentes b√°sicos
            await this.initializeBasicComponents();

            // 4. Eventos b√°sicos
            this.setupBasicEvents();

            // 5. Ocultar loading
            this.hideBasicLoading();

            this.isInitialized = true;
            const totalTime = performance.now() - this.initStartTime;

            console.log(`‚úÖ Inicializaci√≥n b√°sica completada en ${totalTime.toFixed(2)}ms`);

            // Disparar evento de inicializaci√≥n
            document.dispatchEvent(new CustomEvent('datacrypt:ready', {
                detail: { manager: this, mode: 'fallback' }
            }));

            return true;

        } catch (error) {
            console.error('‚ùå Error en inicializaci√≥n b√°sica:', error);
            return false;
        }
    }

    /**
     * ‚è≥ LOADING B√ÅSICO
     */
    showBasicLoading() {
        const loading = document.getElementById('loading-screen');
        if (loading) {
            loading.style.display = 'flex';
            const text = loading.querySelector('p');
            if (text) text.textContent = 'Inicializando DataCrypt Labs...';
        }
    }

    hideBasicLoading() {
        const loading = document.getElementById('loading-screen');
        if (loading) {
            setTimeout(() => {
                loading.style.opacity = '0';
                setTimeout(() => loading.style.display = 'none', 500);
            }, 300);
        }
    }

    /**
     * üìã CONFIGURACI√ìN B√ÅSICA
     */
    async loadBasicConfig() {
        this.config = {
            app: {
                name: 'DataCrypt Labs',
                version: '3.0.0'
            },
            ui: {
                theme: 'corporate'
            },
            performance: {
                lazyLoading: true
            }
        };
    }

    /**
     * üß© COMPONENTES B√ÅSICOS
     */
    async initializeBasicComponents() {
        const components = [
            'navigation',
            'hero',
            'services',
            'portfolio',
            'contact'
        ];

        for (const componentName of components) {
            try {
                await this.initializeBasicComponent(componentName);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Error inicializando ${componentName}:`, error.message);
            }
        }
    }

    async initializeBasicComponent(name) {
        // Inicializaci√≥n gen√©rica b√°sica
        const element = document.getElementById(name) || document.querySelector(`[data-component="${name}"]`);
        if (element) {
            element.classList.add('initialized');
            this.components.set(name, { element, initialized: true });
            console.log(`‚úÖ Componente b√°sico ${name} inicializado`);
        }
    }

    /**
     * üåê EVENTOS B√ÅSICOS
     */
    setupBasicEvents() {
        // Evento de scroll b√°sico
        let ticking = false;
        window.addEventListener('scroll', () => {
            if (!ticking) {
                requestAnimationFrame(() => {
                    this.handleBasicScroll();
                    ticking = false;
                });
                ticking = true;
            }
        });

        // Evento de resize b√°sico
        window.addEventListener('resize', () => {
            this.handleBasicResize();
        });

        console.log('üåê Eventos b√°sicos configurados');
    }

    handleBasicScroll() {
        // Implementaci√≥n b√°sica de scroll
        const scrollY = window.scrollY;
        document.documentElement.style.setProperty('--scroll-y', scrollY + 'px');
    }

    handleBasicResize() {
        // Implementaci√≥n b√°sica de resize
        const width = window.innerWidth;
        document.documentElement.style.setProperty('--viewport-width', width + 'px');
    }

    /**
     * üìä API P√öBLICA DE COMPATIBILIDAD
     */
    getComponent(name) {
        if (this.unifiedManager) {
            return this.unifiedManager.getComponent(name);
        }
        return this.components.get(name);
    }

    getConfig(path) {
        if (this.configService) {
            return this.configService.get(path);
        }
        return path ? this.config[path] : this.config;
    }

    isReady() {
        return this.isInitialized;
    }

    getState() {
        if (this.unifiedManager) {
            return this.unifiedManager.getState();
        }
        return {
            isInitialized: this.isInitialized,
            componentsCount: this.components.size,
            mode: 'fallback'
        };
    }

    /**
     * üßπ DESTRUCCI√ìN
     */
    destroy() {
        if (this.unifiedManager && this.unifiedManager.destroy) {
            this.unifiedManager.destroy();
        }
        this.isInitialized = false;
        console.log('üßπ DataCryptLabsManager destruido');
    }
}

// Singleton instance
DataCryptLabsManager.instance = null;

/**
 * üöÄ FUNCI√ìN DE INICIALIZACI√ìN GLOBAL
 */
async function initializeDataCrypt() {
    try {
        const manager = new DataCryptLabsManager();
        const success = await manager.initialize();

        if (success) {
            console.log('üéâ DataCrypt Labs inicializado exitosamente');

            // Hacer disponible globalmente
            window.dataCryptManager = manager;

            return manager;
        } else {
            throw new Error('Inicializaci√≥n fall√≥');
        }
    } catch (error) {
        console.error('‚ùå Error fatal en inicializaci√≥n:', error);
        return null;
    }
}

/**
 * üéØ AUTO-INICIALIZACI√ìN
 */
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDataCrypt);
} else {
    initializeDataCrypt();
}

// Exports para compatibilidad
if (typeof window !== 'undefined') {
    window.DataCryptLabsManager = DataCryptLabsManager;
    window.initializeDataCrypt = initializeDataCrypt;
}

// Export modular
export { DataCryptLabsManager, initializeDataCrypt };
export default DataCryptLabsManager;