#!/usr/bin/env python3
"""
DataCrypt Labs - Sistema de Inicializaci√≥n Completo
An√°lisis bajo Filosof√≠a de Mejora Continua - PDCA

Este script inicia todos los componentes del sistema siguiendo
la metodolog√≠a PDCA (Plan-Do-Check-Act) para mejora continua.
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

class DataCryptSystemInitializer:
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.backend_file = self.base_path / "datacrypt_backend_v3_complete.py"
        self.config = {
            "system_name": "DataCrypt Labs - Sistema Integrado v3.0",
            "methodology": "PDCA - Mejora Continua",
            "components": [
                "Backend FastAPI v3.0",
                "Sistema de Voz Integrado",
                "Dashboard Administrativo",
                "Gesti√≥n de Configuraci√≥n",
                "Monitoreo en Tiempo Real"
            ]
        }
        
    def plan_phase(self):
        """PLAN: Planificar el inicio del sistema"""
        print("üéØ FASE PLAN - Planificaci√≥n del Sistema")
        print("=" * 50)
        print(f"üìã Sistema: {self.config['system_name']}")
        print(f"üîÑ Metodolog√≠a: {self.config['methodology']}")
        print("\nüìä Componentes a inicializar:")
        for i, component in enumerate(self.config['components'], 1):
            print(f"  {i}. {component}")
        
        print(f"\nüìÇ Directorio base: {self.base_path}")
        print(f"üêç Backend: {self.backend_file}")
        
        # Verificar prerequisitos
        if not self.backend_file.exists():
            print(f"‚ùå Error: Backend no encontrado en {self.backend_file}")
            return False
            
        print("‚úÖ Planificaci√≥n completada")
        return True
    
    def do_phase(self):
        """DO: Ejecutar el plan"""
        print("\nüöÄ FASE DO - Ejecuci√≥n del Sistema")
        print("=" * 50)
        
        try:
            print("üîß Iniciando Backend FastAPI v3.0...")
            
            # Cambiar al directorio del script
            os.chdir(self.base_path)
            
            # Iniciar el backend
            process = subprocess.Popen([
                sys.executable, 
                "datacrypt_backend_v3_complete.py"
            ], 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
            )
            
            # Esperar un momento para que el servidor se inicie
            time.sleep(3)
            
            # Verificar si el proceso est√° corriendo
            if process.poll() is None:
                print("‚úÖ Backend iniciado correctamente")
                print(f"üåê Servidor disponible en: http://localhost:8000")
                print(f"üìö Documentaci√≥n API: http://localhost:8000/docs")
                print(f"üé§ Endpoint de voz: http://localhost:8000/api/voice/report")
                print(f"üîç Estado del sistema: http://localhost:8000/api/status")
                return process
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå Error iniciando backend: {stderr}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error en fase DO: {e}")
            return None
    
    def check_phase(self, process):
        """CHECK: Verificar el funcionamiento"""
        print("\nüîç FASE CHECK - Verificaci√≥n del Sistema")
        print("=" * 50)
        
        if process is None:
            print("‚ùå No hay proceso para verificar")
            return False
        
        try:
            import requests
            
            # Verificar endpoints principales
            endpoints = [
                ("/api/health", "Estado de salud"),
                ("/api/status", "Estado del sistema"),
                ("/api/metrics", "M√©tricas del sistema"),
                ("/api/config", "Configuraci√≥n")
            ]
            
            base_url = "http://localhost:8000"
            
            for endpoint, description in endpoints:
                try:
                    response = requests.get(f"{base_url}{endpoint}", timeout=5)
                    if response.status_code == 200:
                        print(f"‚úÖ {description}: OK")
                    else:
                        print(f"‚ö†Ô∏è {description}: HTTP {response.status_code}")
                except requests.RequestException as e:
                    print(f"‚ùå {description}: Error de conexi√≥n")
            
            print("‚úÖ Verificaci√≥n de endpoints completada")
            return True
            
        except ImportError:
            print("‚ö†Ô∏è M√≥dulo 'requests' no disponible para verificaci√≥n completa")
            print("‚úÖ Verificaci√≥n b√°sica: Proceso corriendo")
            return True
            
    def act_phase(self, success):
        """ACT: Actuar basado en los resultados"""
        print("\n‚ö° FASE ACT - Acci√≥n y Mejora Continua")
        print("=" * 50)
        
        if success:
            print("üéâ Sistema iniciado exitosamente")
            print("\nüìã Acciones disponibles:")
            print("  1. Abrir Dashboard: http://localhost:8000/admin/dashboard.html")
            print("  2. Ver documentaci√≥n API: http://localhost:8000/docs")
            print("  3. Probar sistema de voz desde el dashboard")
            print("  4. Revisar m√©tricas en tiempo real")
            
            print("\nüîÑ Para mejora continua:")
            print("  ‚Ä¢ Monitorear logs del sistema")
            print("  ‚Ä¢ Revisar m√©tricas de rendimiento")
            print("  ‚Ä¢ Implementar alertas automatizadas")
            print("  ‚Ä¢ Optimizar configuraciones basado en uso")
            
        else:
            print("‚ö†Ô∏è Sistema iniciado con problemas")
            print("\nüõ†Ô∏è Acciones correctivas:")
            print("  ‚Ä¢ Verificar puertos disponibles")
            print("  ‚Ä¢ Instalar dependencias faltantes")
            print("  ‚Ä¢ Revisar logs de error")
            print("  ‚Ä¢ Ejecutar diagn√≥sticos de sistema")
        
        print(f"\nüìä Resumen de inicializaci√≥n guardado en: system_startup_log.json")
        
        # Guardar log de inicializaci√≥n
        log_data = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "success": success,
            "methodology": "PDCA",
            "system": self.config['system_name'],
            "components": self.config['components']
        }
        
        with open("system_startup_log.json", "w") as f:
            json.dump(log_data, f, indent=2)
    
    def run_pdca_cycle(self):
        """Ejecutar ciclo completo PDCA"""
        print("üîÑ INICIANDO CICLO PDCA - MEJORA CONTINUA")
        print("üè¢ DataCrypt Labs - Sistema Integrado v3.0")
        print("=" * 60)
        
        # PLAN
        if not self.plan_phase():
            print("‚ùå Error en fase PLAN. Abortando...")
            return
        
        # DO
        process = self.do_phase()
        
        # CHECK
        success = self.check_phase(process)
        
        # ACT
        self.act_phase(success)
        
        if success and process:
            print("\nüéØ Sistema listo para operaci√≥n")
            print("üí° Presiona Ctrl+C para detener el sistema")
            
            try:
                # Mantener el sistema corriendo
                while True:
                    time.sleep(60)
                    if process.poll() is not None:
                        print("‚ö†Ô∏è El proceso del backend se detuvo inesperadamente")
                        break
                    else:
                        print("‚úÖ Sistema operativo - Verificaci√≥n peri√≥dica OK")
                        
            except KeyboardInterrupt:
                print("\nüõë Deteniendo sistema...")
                process.terminate()
                process.wait()
                print("‚úÖ Sistema detenido correctamente")

if __name__ == "__main__":
    print("üöÄ DataCrypt Labs - Inicializador del Sistema")
    print("üîÑ Filosof√≠a de Mejora Continua - PDCA")
    print("=" * 60)
    
    initializer = DataCryptSystemInitializer()
    initializer.run_pdca_cycle()